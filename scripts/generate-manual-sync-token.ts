// scripts/generate-manual-sync-token.ts
import crypto from 'crypto';

/**
 * Script para generar un token Bearer para la sincronizaci√≥n manual
 * V√°lido por 1 a√±o
 */

interface TokenPayload {
  purpose: string;
  issued_at: number;
  expires_at: number;
  version: string;
}

function generateSecureToken(): string {
  // Generar 32 bytes aleatorios y convertir a base64url
  const randomBytes = crypto.randomBytes(32);
  return randomBytes.toString('base64url');
}

function createTokenWithMetadata(): { token: string; metadata: TokenPayload } {
  const now = Math.floor(Date.now() / 1000); // Unix timestamp
  const oneYear = 365 * 24 * 60 * 60; // 1 a√±o en segundos
  
  const metadata: TokenPayload = {
    purpose: 'manual-sync-api',
    issued_at: now,
    expires_at: now + oneYear,
    version: '1.0'
  };
  
  const token = generateSecureToken();
  
  return { token, metadata };
}

function formatForEnvFile(token: string, metadata: TokenPayload): string {
  const expirationDate = new Date(metadata.expires_at * 1000);
  
  return `
# Token de sincronizaci√≥n manual generado el ${new Date().toLocaleString()}
# V√°lido hasta: ${expirationDate.toLocaleString()}
# Prop√≥sito: ${metadata.purpose}
MANUAL_SYNC_TOKEN=${token}
`;
}

function main() {
  console.log('üîê Generando token Bearer para sincronizaci√≥n manual...\n');
  
  const { token, metadata } = createTokenWithMetadata();
  
  console.log('‚úÖ Token generado exitosamente');
  console.log('üìã Informaci√≥n del token:');
  console.log(`   - Prop√≥sito: ${metadata.purpose}`);
  console.log(`   - Emitido: ${new Date(metadata.issued_at * 1000).toLocaleString()}`);
  console.log(`   - Expira: ${new Date(metadata.expires_at * 1000).toLocaleString()}`);
  console.log(`   - Versi√≥n: ${metadata.version}`);
  console.log(`   - Longitud: ${token.length} caracteres\n`);
  
  console.log('üîë Token Bearer:');
  console.log(`${token}\n`);
  
  console.log('üìù Agregar al archivo .env:');
  console.log(formatForEnvFile(token, metadata));
  
  console.log('üöÄ Uso del token:');
  console.log('   GET /api/v1/phidias/manual-sync/status');
  console.log('   Headers: Authorization: Bearer ' + token);
  console.log('');
  console.log('   POST /api/v1/phidias/manual-sync');
  console.log('   Headers: Authorization: Bearer ' + token);
  console.log('   Body: { "syncAll": true } o { "specificLevel": "Elementary" }\n');
  
  console.log('‚ö†Ô∏è  IMPORTANTE:');
  console.log('   - Guarda este token de forma segura');
  console.log('   - No lo compartas en repositorios p√∫blicos');
  console.log('   - √ösalo solo para automatizaci√≥n con N8N');
  console.log('   - Regenera si es comprometido');
  
  // Tambi√©n retornar para uso program√°tico
  return { token, metadata };
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

export { generateSecureToken, createTokenWithMetadata, formatForEnvFile };